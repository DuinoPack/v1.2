// elevator example
//
// s: state: 0=waiting, 1=goingup, 2=goingdown
// f: current floor [0..31]
// p: pickups, bit vector, floors with passengers waiting to enter the elevator
// d: dropoffs, bit vector, floors with passengers in elevator waiting to exit

// clear the eeprom
//rm *

// run the sim
function go {run elevator,500; run demand,10000;}

// demand generation task
function demand	{if random(100)>50 callcar(random(32));}

// state machine task
function elevator {switch s {waiting; goingup; goingdown;}}

// state handlers
function waiting {s=0; if callat(f) service; else if workbelow goingdown; else if workabove goingup;}
function goingup {s=1; if workabove moveto(f+1); else waiting;}
function goingdown {s=2; if workbelow moveto(f-1); else waiting;}

// move to a new floor
function service {cleardrop(f); if callat(f) {clearcall(f); requestdrop(random(32));}}
function moveto {service; f=arg(1); service; show;}

// there is work above if f<31 and bit set in p or d above f
function workabove 	{w=f; while ++w<32 if dropat(w) || callat(w) return 1; return 0;}

// there is work below if f>0 and bit set in p or d below f
function workbelow	{w=f; while --w>=0 if dropat(w) || callat(w) return 1; return 0;}

// car operations, take floor [0..31] as arg(1)
function callcar 	{p=bs(p,arg(1))}
function clearcall	{p=bc(p,arg(1))}
function callat		{return br(p,arg(1))}
function requestdrop {d=bs(d,arg(1))}
function cleardrop	{d=bc(d,arg(1))}
function dropat		{return br(d,arg(1))}

// simple printed status
//function show {print f,s,p:b,d:b}

// show state of the system as a map: -p---------p------<-------------18
//
function ss {if !s c='W'; else if s==1 c='>'; else c='<';}
function sf {if callat(arg(1)) c='p'; else if dropat(arg(1)) c='d'; else c='-';}
function pm {if arg(1)==f ss; else sf(arg(1)); print c:y,;}
function show {i=0;while i<32 pm(i++); print f;}
