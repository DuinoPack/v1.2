
BootloaderHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  000079c2  00000a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c2  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080014a  0080014a  00000aa0  2**0
                  ALLOC
  3 .debug_aranges 000002c0  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000773  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000428c  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001153  00000000  00000000  0000575f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003c54  00000000  00000000  000068b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000400  00000000  00000000  0000a508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001ddc  00000000  00000000  0000a908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000022d3  00000000  00000000  0000c6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  0000e9b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    7002:	00 00       	nop
    7004:	6e c0       	rjmp	.+220    	; 0x70e2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	6c c0       	rjmp	.+216    	; 0x70e2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	6a c0       	rjmp	.+212    	; 0x70e2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	68 c0       	rjmp	.+208    	; 0x70e2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	66 c0       	rjmp	.+204    	; 0x70e2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	64 c0       	rjmp	.+200    	; 0x70e2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	62 c0       	rjmp	.+196    	; 0x70e2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	60 c0       	rjmp	.+192    	; 0x70e2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	5e c0       	rjmp	.+188    	; 0x70e2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	79 c2       	rjmp	.+1266   	; 0x751c <__vector_10>
    702a:	00 00       	nop
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	58 c0       	rjmp	.+176    	; 0x70e2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	56 c0       	rjmp	.+172    	; 0x70e2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	54 c0       	rjmp	.+168    	; 0x70e2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	50 c0       	rjmp	.+160    	; 0x70e2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	94 c0       	rjmp	.+296    	; 0x716e <__vector_17>
    7046:	00 00       	nop
    7048:	4c c0       	rjmp	.+152    	; 0x70e2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	48 c0       	rjmp	.+144    	; 0x70e2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	46 c0       	rjmp	.+140    	; 0x70e2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	44 c0       	rjmp	.+136    	; 0x70e2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	42 c0       	rjmp	.+132    	; 0x70e2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	40 c0       	rjmp	.+128    	; 0x70e2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	3e c0       	rjmp	.+124    	; 0x70e2 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	3c c0       	rjmp	.+120    	; 0x70e2 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	3a c0       	rjmp	.+116    	; 0x70e2 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	38 c0       	rjmp	.+112    	; 0x70e2 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	36 c0       	rjmp	.+108    	; 0x70e2 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	34 c0       	rjmp	.+104    	; 0x70e2 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	32 c0       	rjmp	.+100    	; 0x70e2 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	30 c0       	rjmp	.+96     	; 0x70e2 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	2e c0       	rjmp	.+92     	; 0x70e2 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	2a c0       	rjmp	.+84     	; 0x70e2 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	26 c0       	rjmp	.+76     	; 0x70e2 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	24 c0       	rjmp	.+72     	; 0x70e2 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	22 c0       	rjmp	.+68     	; 0x70e2 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	20 c0       	rjmp	.+64     	; 0x70e2 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	1e c0       	rjmp	.+60     	; 0x70e2 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <__do_copy_data>:
    70b8:	11 e0       	ldi	r17, 0x01	; 1
    70ba:	a0 e0       	ldi	r26, 0x00	; 0
    70bc:	b1 e0       	ldi	r27, 0x01	; 1
    70be:	e2 ec       	ldi	r30, 0xC2	; 194
    70c0:	f9 e7       	ldi	r31, 0x79	; 121
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <.do_copy_data_start>

000070c4 <.do_copy_data_loop>:
    70c4:	05 90       	lpm	r0, Z+
    70c6:	0d 92       	st	X+, r0

000070c8 <.do_copy_data_start>:
    70c8:	aa 34       	cpi	r26, 0x4A	; 74
    70ca:	b1 07       	cpc	r27, r17
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <.do_copy_data_loop>

000070ce <__do_clear_bss>:
    70ce:	11 e0       	ldi	r17, 0x01	; 1
    70d0:	aa e4       	ldi	r26, 0x4A	; 74
    70d2:	b1 e0       	ldi	r27, 0x01	; 1
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <.do_clear_bss_start>

000070d6 <.do_clear_bss_loop>:
    70d6:	1d 92       	st	X+, r1

000070d8 <.do_clear_bss_start>:
    70d8:	a4 36       	cpi	r26, 0x64	; 100
    70da:	b1 07       	cpc	r27, r17
    70dc:	e1 f7       	brne	.-8      	; 0x70d6 <.do_clear_bss_loop>
    70de:	38 d1       	rcall	.+624    	; 0x7350 <main>
    70e0:	6e c4       	rjmp	.+2268   	; 0x79be <_exit>

000070e2 <__bad_interrupt>:
    70e2:	8e cf       	rjmp	.-228    	; 0x7000 <__vectors>

000070e4 <Bootloader_StartUserApp>:
			/* Set GPIOR registers to a magic key that will be read by the user application */
			GPIOR0 = 0xDC;
			GPIOR1 = 0xA6;
		#elif defined(_COLD_START_)
			#warning "Using cold start mode. The bootloader will close the CDC afeter downloading the software."
			GPIOR0 = 0x00;
    70e4:	1e ba       	out	0x1e, r1	; 30
			GPIOR1 = 0x00;
    70e6:	1a bc       	out	0x2a, r1	; 42
		#else
			#error "Not bootloader switch mode selected"
		#endif
		
		MCUCR = (1 << IVCE);
    70e8:	81 e0       	ldi	r24, 0x01	; 1
    70ea:	85 bf       	out	0x35, r24	; 53
		MCUCR = 0;
    70ec:	15 be       	out	0x35, r1	; 53
		
    AppStartPtr();
    70ee:	e0 e0       	ldi	r30, 0x00	; 0
    70f0:	f0 e0       	ldi	r31, 0x00	; 0
    70f2:	09 95       	icall

000070f4 <initDisplay>:
}
*/

 void initDisplay(){
	//Set columns as outputs
	C1_DDR |= (1<<C1);
    70f4:	20 9a       	sbi	0x04, 0	; 4
	C2_DDR |= (1<<C2);
    70f6:	27 9a       	sbi	0x04, 7	; 4
	C3_DDR |= (1<<C3);
    70f8:	50 9a       	sbi	0x0a, 0	; 10
	C4_DDR |= (1<<C4);
    70fa:	51 9a       	sbi	0x0a, 1	; 10
	C5_DDR |= (1<<C5);
    70fc:	54 9a       	sbi	0x0a, 4	; 10
	C6_DDR |= (1<<C6);
    70fe:	57 9a       	sbi	0x0a, 7	; 10
	C7_DDR |= (1<<C7);
    7100:	3e 9a       	sbi	0x07, 6	; 7
	C8_DDR |= (1<<C8);
    7102:	80 9a       	sbi	0x10, 0	; 16

	//Set MUX selector lines for rows as outputs
	R0_DDR |= (1<<R0);
    7104:	21 9a       	sbi	0x04, 1	; 4
	R1_DDR |= (1<<R1);
    7106:	22 9a       	sbi	0x04, 2	; 4
	R2_DDR |= (1<<R2);
    7108:	23 9a       	sbi	0x04, 3	; 4

	//Clear all Columns	
	C1_PORT &=~ (1<<C1);
    710a:	28 98       	cbi	0x05, 0	; 5
	C2_PORT &=~ (1<<C2);
    710c:	2f 98       	cbi	0x05, 7	; 5
	C3_PORT &=~ (1<<C3);
    710e:	58 98       	cbi	0x0b, 0	; 11
	C4_PORT &=~ (1<<C4);
    7110:	59 98       	cbi	0x0b, 1	; 11
	C5_PORT &=~ (1<<C5);
    7112:	5c 98       	cbi	0x0b, 4	; 11
	C6_PORT &=~ (1<<C6);
    7114:	5f 98       	cbi	0x0b, 7	; 11
	C7_PORT &=~ (1<<C7);
    7116:	46 98       	cbi	0x08, 6	; 8
	C8_PORT &=~ (1<<C8);
    7118:	88 98       	cbi	0x11, 0	; 17

	// Activate row 1
	R0_PORT &=~ (1<<R0);
    711a:	29 98       	cbi	0x05, 1	; 5
	R1_PORT &=~ (1<<R1);
    711c:	2a 98       	cbi	0x05, 2	; 5
	R2_PORT &=~ (1<<R2);
    711e:	2b 98       	cbi	0x05, 3	; 5

	//Timer 1 setup

	// Clear registers
	TCCR1B = 0;
    7120:	e1 e8       	ldi	r30, 0x81	; 129
    7122:	f0 e0       	ldi	r31, 0x00	; 0
    7124:	10 82       	st	Z, r1
	TCCR1A = 0;
    7126:	a0 e8       	ldi	r26, 0x80	; 128
    7128:	b0 e0       	ldi	r27, 0x00	; 0
    712a:	1c 92       	st	X, r1

	// Set prescaler
	TCCR1B |= (1 << CS10);
    712c:	80 81       	ld	r24, Z
    712e:	81 60       	ori	r24, 0x01	; 1
    7130:	80 83       	st	Z, r24
	TCCR1B &=~(1 << CS11);
    7132:	80 81       	ld	r24, Z
    7134:	8d 7f       	andi	r24, 0xFD	; 253
    7136:	80 83       	st	Z, r24
	TCCR1B &=~(1 << CS12);
    7138:	80 81       	ld	r24, Z
    713a:	8b 7f       	andi	r24, 0xFB	; 251
    713c:	80 83       	st	Z, r24

	// Set Timer 1 in CTC MODE
	TCCR1A &=~(1<<WGM10);
    713e:	8c 91       	ld	r24, X
    7140:	8e 7f       	andi	r24, 0xFE	; 254
    7142:	8c 93       	st	X, r24
	TCCR1A &=~(1<<WGM11);
    7144:	8c 91       	ld	r24, X
    7146:	8d 7f       	andi	r24, 0xFD	; 253
    7148:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12);
    714a:	80 81       	ld	r24, Z
    714c:	88 60       	ori	r24, 0x08	; 8
    714e:	80 83       	st	Z, r24
	TCCR1B &=~(1<<WGM13);
    7150:	80 81       	ld	r24, Z
    7152:	8f 7e       	andi	r24, 0xEF	; 239
    7154:	80 83       	st	Z, r24

	// Compare Register
	OCR1A = 0x7FFF;
    7156:	8f ef       	ldi	r24, 0xFF	; 255
    7158:	9f e7       	ldi	r25, 0x7F	; 127
    715a:	90 93 89 00 	sts	0x0089, r25
    715e:	80 93 88 00 	sts	0x0088, r24
	// Maximum OCR1A value for smooth video: 0x9FFF
	// Any higher OCR1A value will show flickr on the screen
	// Any lower value will be nice, but maybe very CPU consuming

	//Enable timer 1 interrupt
	TIMSK1 |= (1 << OCIE1A);
    7162:	ef e6       	ldi	r30, 0x6F	; 111
    7164:	f0 e0       	ldi	r31, 0x00	; 0
    7166:	80 81       	ld	r24, Z
    7168:	82 60       	ori	r24, 0x02	; 2
    716a:	80 83       	st	Z, r24
}
    716c:	08 95       	ret

0000716e <__vector_17>:


ISR(TIMER1_COMPA_vect){	
    716e:	1f 92       	push	r1
    7170:	0f 92       	push	r0
    7172:	0f b6       	in	r0, 0x3f	; 63
    7174:	0f 92       	push	r0
    7176:	11 24       	eor	r1, r1
    7178:	2f 93       	push	r18
    717a:	8f 93       	push	r24
    717c:	9f 93       	push	r25
    717e:	ef 93       	push	r30
    7180:	ff 93       	push	r31
		static int ovfcount=0;
		uint8_t buffer;
		
		//=======================================================
		//Drawing
		if (start!=0){
    7182:	80 91 4a 01 	lds	r24, 0x014A
    7186:	88 23       	and	r24, r24
    7188:	e1 f0       	breq	.+56     	; 0x71c2 <__vector_17+0x54>
			if ((ovfcount++)==25){
    718a:	80 91 4b 01 	lds	r24, 0x014B
    718e:	90 91 4c 01 	lds	r25, 0x014C
    7192:	01 96       	adiw	r24, 0x01	; 1
    7194:	90 93 4c 01 	sts	0x014C, r25
    7198:	80 93 4b 01 	sts	0x014B, r24
    719c:	01 97       	sbiw	r24, 0x01	; 1
    719e:	49 97       	sbiw	r24, 0x19	; 25
    71a0:	81 f4       	brne	.+32     	; 0x71c2 <__vector_17+0x54>
				
				buffer = screenMem[7];
    71a2:	90 91 59 01 	lds	r25, 0x0159
    71a6:	e8 e5       	ldi	r30, 0x58	; 88
    71a8:	f1 e0       	ldi	r31, 0x01	; 1
				
				for (i=7;i>=1;i--){
					screenMem[i] = screenMem[i-1];
    71aa:	80 81       	ld	r24, Z
    71ac:	81 83       	std	Z+1, r24	; 0x01
    71ae:	31 97       	sbiw	r30, 0x01	; 1
		if (start!=0){
			if ((ovfcount++)==25){
				
				buffer = screenMem[7];
				
				for (i=7;i>=1;i--){
    71b0:	81 e0       	ldi	r24, 0x01	; 1
    71b2:	e1 35       	cpi	r30, 0x51	; 81
    71b4:	f8 07       	cpc	r31, r24
    71b6:	c9 f7       	brne	.-14     	; 0x71aa <__vector_17+0x3c>
					screenMem[i] = screenMem[i-1];
				}
				screenMem[0] = buffer;
    71b8:	91 83       	std	Z+1, r25	; 0x01
				
				ovfcount = 0;
    71ba:	10 92 4c 01 	sts	0x014C, r1
    71be:	10 92 4b 01 	sts	0x014B, r1
		//=======================================================
		
		// Display
    //Shut down all rows and columns
    //R1_PORT = 0xFF;
    C1_PORT &= ~(1<<C1);
    71c2:	28 98       	cbi	0x05, 0	; 5
    C2_PORT &= ~(1<<C2);
    71c4:	2f 98       	cbi	0x05, 7	; 5
    C3_PORT &= ~(1<<C3);
    71c6:	58 98       	cbi	0x0b, 0	; 11
    C4_PORT &= ~(1<<C4);
    71c8:	59 98       	cbi	0x0b, 1	; 11
    C5_PORT &= ~(1<<C5);
    71ca:	5c 98       	cbi	0x0b, 4	; 11
    C6_PORT &= ~(1<<C6);
    71cc:	5f 98       	cbi	0x0b, 7	; 11
    C7_PORT &= ~(1<<C7);
    71ce:	46 98       	cbi	0x08, 6	; 8
    C8_PORT &= ~(1<<C8);
    71d0:	88 98       	cbi	0x11, 0	; 17

    //Next row
    activeRow = (activeRow+1) % memSize;
    71d2:	80 91 4d 01 	lds	r24, 0x014D
    71d6:	90 e0       	ldi	r25, 0x00	; 0
    71d8:	01 96       	adiw	r24, 0x01	; 1
    71da:	87 70       	andi	r24, 0x07	; 7
    71dc:	90 70       	andi	r25, 0x00	; 0
    71de:	80 93 4d 01 	sts	0x014D, r24
		{
				row = screenMem[activeRow];
		}
		else if (screenOrientation==1)
		{
			row = screenMem[(memSize-1) - activeRow];
    71e2:	e9 e5       	ldi	r30, 0x59	; 89
    71e4:	f1 e0       	ldi	r31, 0x01	; 1
    71e6:	e8 1b       	sub	r30, r24
    71e8:	f9 0b       	sbc	r31, r25
    71ea:	e0 81       	ld	r30, Z
		}
	
    //Output all columns, switch leds on.

    //Column 1
    if ((row & 0x80) == 0x80)
    71ec:	e7 fd       	sbrc	r30, 7
    {
    	if (screenOrientation==0)
        	C1_PORT |= (1<<C1);
        else
        	C8_PORT |= (1<<C8);
    71ee:	88 9a       	sbi	0x11, 0	; 17
    }
    //Column 2
    if ((row & 0x40) == 0x40)
    71f0:	e6 fd       	sbrc	r30, 6
    {
    	if (screenOrientation==0)
        	C2_PORT |= (1<<C2);
        else
        	C7_PORT |= (1<<C7);
    71f2:	46 9a       	sbi	0x08, 6	; 8
    }
    //Column 3
    if ((row & 0x20) == 0x20)
    71f4:	e5 fd       	sbrc	r30, 5
    {
    	if (screenOrientation==0)
        	C3_PORT |= (1<<C3);
        else
        	C6_PORT |= (1<<C6);
    71f6:	5f 9a       	sbi	0x0b, 7	; 11
    }
    //Column 4
    if ((row & 0x10) == 0x10)
    71f8:	e4 fd       	sbrc	r30, 4
    {
    	if (screenOrientation==0)
        	C4_PORT |= (1<<C4);
        else
        	C5_PORT |= (1<<C5);
    71fa:	5c 9a       	sbi	0x0b, 4	; 11
    }
    //Column 5
    if ((row & 0x08) == 0x08)
    71fc:	e3 fd       	sbrc	r30, 3
    {
    	if (screenOrientation==0)
        	C5_PORT |= (1<<C5);
        else
        	C4_PORT |= (1<<C4);
    71fe:	59 9a       	sbi	0x0b, 1	; 11
    }
    //Column 6
    if ((row & 0x04) == 0x04)
    7200:	e2 fd       	sbrc	r30, 2
    {
    	if (screenOrientation==0)
        	C6_PORT |= (1<<C6);
        else
        	C3_PORT |= (1<<C3);
    7202:	58 9a       	sbi	0x0b, 0	; 11
    }
    //Column 7
    if ((row & 0x02) == 0x02)
    7204:	e1 fd       	sbrc	r30, 1
    {
    	if (screenOrientation==0)
        	C7_PORT |= (1<<C7);
        else
        	C2_PORT |= (1<<C2);
    7206:	2f 9a       	sbi	0x05, 7	; 5
    }
    //Column 8
    if ((row & 0x01) == 0x01)
    7208:	e0 fd       	sbrc	r30, 0
    {
    	if (screenOrientation==0)
        	C8_PORT |= (1<<C8);
        else
        	C1_PORT |= (1<<C1);
    720a:	28 9a       	sbi	0x05, 0	; 5
    }


		if (activeRow & 0x01) {
    720c:	80 ff       	sbrs	r24, 0
    720e:	02 c0       	rjmp	.+4      	; 0x7214 <__vector_17+0xa6>
			R0_PORT |= (1<<R0);
    7210:	29 9a       	sbi	0x05, 1	; 5
    7212:	01 c0       	rjmp	.+2      	; 0x7216 <__vector_17+0xa8>
		}else{
			R0_PORT &=~(1<<R0);
    7214:	29 98       	cbi	0x05, 1	; 5
		}

		if (activeRow & 0x02) {
    7216:	81 ff       	sbrs	r24, 1
    7218:	02 c0       	rjmp	.+4      	; 0x721e <__vector_17+0xb0>
			R1_PORT |= (1<<R1);
    721a:	2a 9a       	sbi	0x05, 2	; 5
    721c:	01 c0       	rjmp	.+2      	; 0x7220 <__vector_17+0xb2>
		}else{
			R1_PORT &=~(1<<R1);
    721e:	2a 98       	cbi	0x05, 2	; 5
		}

		if (activeRow & 0x04) {
    7220:	82 ff       	sbrs	r24, 2
    7222:	02 c0       	rjmp	.+4      	; 0x7228 <__vector_17+0xba>
			R2_PORT |= (1<<R2);
    7224:	2b 9a       	sbi	0x05, 3	; 5
    7226:	01 c0       	rjmp	.+2      	; 0x722a <__vector_17+0xbc>
		}else{
			R2_PORT &=~(1<<R2);
    7228:	2b 98       	cbi	0x05, 3	; 5
		}
    722a:	ff 91       	pop	r31
    722c:	ef 91       	pop	r30
    722e:	9f 91       	pop	r25
    7230:	8f 91       	pop	r24
    7232:	2f 91       	pop	r18
    7234:	0f 90       	pop	r0
    7236:	0f be       	out	0x3f, r0	; 63
    7238:	0f 90       	pop	r0
    723a:	1f 90       	pop	r1
    723c:	18 95       	reti

0000723e <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    723e:	1f 93       	push	r17
	/* Ignore any requests that aren't directed to the HID interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    7240:	80 91 5c 01 	lds	r24, 0x015C
    7244:	8f 77       	andi	r24, 0x7F	; 127
    7246:	81 32       	cpi	r24, 0x21	; 33
    7248:	09 f0       	breq	.+2      	; 0x724c <EVENT_USB_Device_ControlRequest+0xe>
    724a:	62 c0       	rjmp	.+196    	; 0x7310 <EVENT_USB_Device_ControlRequest+0xd2>
	{
		return;
	}

	/* Process HID specific control requests */
	switch (USB_ControlRequest.bRequest)
    724c:	80 91 5d 01 	lds	r24, 0x015D
    7250:	89 30       	cpi	r24, 0x09	; 9
    7252:	09 f0       	breq	.+2      	; 0x7256 <EVENT_USB_Device_ControlRequest+0x18>
    7254:	5d c0       	rjmp	.+186    	; 0x7310 <EVENT_USB_Device_ControlRequest+0xd2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7256:	80 91 e8 00 	lds	r24, 0x00E8
    725a:	87 7f       	andi	r24, 0xF7	; 247
    725c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7260:	80 91 e8 00 	lds	r24, 0x00E8
	{
		case HID_REQ_SetReport:
			Endpoint_ClearSETUP();
			
			/* Wait until the command has been sent by the host */
			while (!(Endpoint_IsOUTReceived()));
    7264:	82 ff       	sbrs	r24, 2
    7266:	fc cf       	rjmp	.-8      	; 0x7260 <EVENT_USB_Device_ControlRequest+0x22>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    7268:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    726c:	90 91 f1 00 	lds	r25, 0x00F1

				return Data.Value;
    7270:	ac 01       	movw	r20, r24
			
			/* Check if the command is a program page command, or a start application command */
			#if (FLASHEND > 0xFFFF)
			if ((uint16_t)(PageAddress >> 8) == COMMAND_STARTAPPLICATION)
			#else
			if (PageAddress == COMMAND_STARTAPPLICATION)
    7272:	8f ef       	ldi	r24, 0xFF	; 255
    7274:	4f 3f       	cpi	r20, 0xFF	; 255
    7276:	58 07       	cpc	r21, r24
    7278:	19 f4       	brne	.+6      	; 0x7280 <EVENT_USB_Device_ControlRequest+0x42>
			#endif
			{
				RunBootloader = false;
    727a:	10 92 00 01 	sts	0x0100, r1
    727e:	42 c0       	rjmp	.+132    	; 0x7304 <EVENT_USB_Device_ControlRequest+0xc6>
			}
			else
			{
			
				start = 1;
    7280:	81 e0       	ldi	r24, 0x01	; 1
    7282:	80 93 4a 01 	sts	0x014A, r24
				
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
    7286:	83 e0       	ldi	r24, 0x03	; 3
    7288:	fa 01       	movw	r30, r20
    728a:	80 93 57 00 	sts	0x0057, r24
    728e:	e8 95       	spm
				boot_spm_busy_wait();
    7290:	07 b6       	in	r0, 0x37	; 55
    7292:	00 fc       	sbrc	r0, 0
    7294:	fd cf       	rjmp	.-6      	; 0x7290 <EVENT_USB_Device_ControlRequest+0x52>
    7296:	a0 e0       	ldi	r26, 0x00	; 0
    7298:	b0 e0       	ldi	r27, 0x00	; 0
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
    729a:	11 e0       	ldi	r17, 0x01	; 1
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    729c:	20 91 f3 00 	lds	r18, 0x00F3
    72a0:	80 91 f2 00 	lds	r24, 0x00F2
				
				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)				
				{
					/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
					if (!(Endpoint_BytesInEndpoint()))
    72a4:	32 2f       	mov	r19, r18
    72a6:	20 e0       	ldi	r18, 0x00	; 0
    72a8:	90 e0       	ldi	r25, 0x00	; 0
    72aa:	82 2b       	or	r24, r18
    72ac:	93 2b       	or	r25, r19
    72ae:	89 2b       	or	r24, r25
    72b0:	49 f4       	brne	.+18     	; 0x72c4 <EVENT_USB_Device_ControlRequest+0x86>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    72b2:	80 91 e8 00 	lds	r24, 0x00E8
    72b6:	8b 77       	andi	r24, 0x7B	; 123
    72b8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    72bc:	80 91 e8 00 	lds	r24, 0x00E8
					{
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
    72c0:	82 ff       	sbrs	r24, 2
    72c2:	fc cf       	rjmp	.-8      	; 0x72bc <EVENT_USB_Device_ControlRequest+0x7e>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    72c4:	80 91 f1 00 	lds	r24, 0x00F1
    72c8:	68 2f       	mov	r22, r24
				Data.Bytes[1] = UEDATX;
    72ca:	80 91 f1 00 	lds	r24, 0x00F1
    72ce:	78 2f       	mov	r23, r24
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
    72d0:	fd 01       	movw	r30, r26
    72d2:	ee 0f       	add	r30, r30
    72d4:	ff 1f       	adc	r31, r31
    72d6:	e4 0f       	add	r30, r20
    72d8:	f5 1f       	adc	r31, r21
    72da:	0b 01       	movw	r0, r22
    72dc:	10 93 57 00 	sts	0x0057, r17
    72e0:	e8 95       	spm
    72e2:	11 24       	eor	r1, r1
    72e4:	11 96       	adiw	r26, 0x01	; 1
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
				boot_spm_busy_wait();
				
				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)				
    72e6:	a0 34       	cpi	r26, 0x40	; 64
    72e8:	b1 05       	cpc	r27, r1
    72ea:	c1 f6       	brne	.-80     	; 0x729c <EVENT_USB_Device_ControlRequest+0x5e>
					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
				}

				/* Write the filled FLASH page to memory */
				boot_page_write(PageAddress);
    72ec:	85 e0       	ldi	r24, 0x05	; 5
    72ee:	fa 01       	movw	r30, r20
    72f0:	80 93 57 00 	sts	0x0057, r24
    72f4:	e8 95       	spm
				boot_spm_busy_wait();
    72f6:	07 b6       	in	r0, 0x37	; 55
    72f8:	00 fc       	sbrc	r0, 0
    72fa:	fd cf       	rjmp	.-6      	; 0x72f6 <EVENT_USB_Device_ControlRequest+0xb8>

				/* Re-enable RWW section */
				boot_rww_enable();
    72fc:	81 e1       	ldi	r24, 0x11	; 17
    72fe:	80 93 57 00 	sts	0x0057, r24
    7302:	e8 95       	spm
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7304:	80 91 e8 00 	lds	r24, 0x00E8
    7308:	8b 77       	andi	r24, 0x7B	; 123
    730a:	80 93 e8 00 	sts	0x00E8, r24
			}

			Endpoint_ClearOUT();

			Endpoint_ClearStatusStage();
    730e:	78 d0       	rcall	.+240    	; 0x7400 <Endpoint_ClearStatusStage>
			break;
	}
}
    7310:	1f 91       	pop	r17
    7312:	08 95       	ret

00007314 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    7314:	81 e0       	ldi	r24, 0x01	; 1
    7316:	61 ec       	ldi	r22, 0xC1	; 193
    7318:	42 e3       	ldi	r20, 0x32	; 50
{
	/* Setup HID Report Endpoint */
	Endpoint_ConfigureEndpoint(HID_IN_EPNUM, EP_TYPE_INTERRUPT,
		                       ENDPOINT_DIR_IN, HID_IN_EPSIZE,
	                           ENDPOINT_BANK_SINGLE);
}
    731a:	5f c0       	rjmp	.+190    	; 0x73da <Endpoint_ConfigureEndpoint_Prv>

0000731c <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    731c:	84 b7       	in	r24, 0x34	; 52
    731e:	87 7f       	andi	r24, 0xF7	; 247
    7320:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    7322:	88 e1       	ldi	r24, 0x18	; 24
    7324:	0f b6       	in	r0, 0x3f	; 63
    7326:	f8 94       	cli
    7328:	80 93 60 00 	sts	0x0060, r24
    732c:	10 92 60 00 	sts	0x0060, r1
    7330:	0f be       	out	0x3f, r0	; 63

	if ((GPIOR0 == 0xDC) && (GPIOR1 == 0xA6)){
    7332:	8e b3       	in	r24, 0x1e	; 30
    7334:	8c 3d       	cpi	r24, 0xDC	; 220
    7336:	31 f4       	brne	.+12     	; 0x7344 <SetupHardware+0x28>
    7338:	8a b5       	in	r24, 0x2a	; 42
    733a:	86 3a       	cpi	r24, 0xA6	; 166
    733c:	19 f4       	brne	.+6      	; 0x7344 <SetupHardware+0x28>
			AppPtr_t AppStartPtr = (AppPtr_t)0x0000;
			AppStartPtr();
    733e:	e0 e0       	ldi	r30, 0x00	; 0
    7340:	f0 e0       	ldi	r31, 0x00	; 0
    7342:	09 95       	icall
	}
	
	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    7344:	81 e0       	ldi	r24, 0x01	; 1
    7346:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    7348:	82 e0       	ldi	r24, 0x02	; 2
    734a:	85 bf       	out	0x35, r24	; 53

	initDisplay();
    734c:	d3 de       	rcall	.-602    	; 0x70f4 <initDisplay>
	
	/* Initialize USB subsystem */
	USB_Init();
}
    734e:	ce c0       	rjmp	.+412    	; 0x74ec <USB_Init>

00007350 <main>:
 */
int main(void)
{
	
	/* Setup hardware required for the bootloader */
	SetupHardware();
    7350:	e5 df       	rcall	.-54     	; 0x731c <SetupHardware>
	
	// Configure DDR's for switch and Yellow Led
	LED_DDR |= LED_PIN;
    7352:	21 9a       	sbi	0x04, 1	; 4
	RUN_SW_DDR |= RUN_SW_PIN;
    7354:	6a 9a       	sbi	0x0d, 2	; 13
	RUN_SW_PORT |= RUN_SW_PIN;
    7356:	72 9a       	sbi	0x0e, 2	; 14
	
	/* Enable global interrupts so that the USB stack can function */
	sei();
    7358:	78 94       	sei
	
	screenMem[0] = 0b00000000;
    735a:	10 92 52 01 	sts	0x0152, r1
	screenMem[1] = 0b00011000;
    735e:	88 e1       	ldi	r24, 0x18	; 24
    7360:	80 93 53 01 	sts	0x0153, r24
	screenMem[2] = 0b00011000;
    7364:	80 93 54 01 	sts	0x0154, r24
	screenMem[3] = 0b00011000;
    7368:	80 93 55 01 	sts	0x0155, r24
	screenMem[4] = 0b01111110;
    736c:	9e e7       	ldi	r25, 0x7E	; 126
    736e:	90 93 56 01 	sts	0x0156, r25
	screenMem[5] = 0b00111100;
    7372:	9c e3       	ldi	r25, 0x3C	; 60
    7374:	90 93 57 01 	sts	0x0157, r25
	screenMem[6] = 0b00011000;
    7378:	80 93 58 01 	sts	0x0158, r24
	screenMem[7] = 0b00000000;
    737c:	10 92 59 01 	sts	0x0159, r1
    7380:	05 c0       	rjmp	.+10     	; 0x738c <main+0x3c>

	while (RunBootloader){
		if (!(RUN_SW_PORTIN & RUN_SW_PIN)){
    7382:	62 99       	sbic	0x0c, 2	; 12
    7384:	02 c0       	rjmp	.+4      	; 0x738a <main+0x3a>
			RunBootloader = false;
    7386:	10 92 00 01 	sts	0x0100, r1
		}
	  USB_USBTask();
    738a:	07 d3       	rcall	.+1550   	; 0x799a <USB_USBTask>
	screenMem[4] = 0b01111110;
	screenMem[5] = 0b00111100;
	screenMem[6] = 0b00011000;
	screenMem[7] = 0b00000000;

	while (RunBootloader){
    738c:	80 91 00 01 	lds	r24, 0x0100
    7390:	88 23       	and	r24, r24
    7392:	b9 f7       	brne	.-18     	; 0x7382 <main+0x32>
			RunBootloader = false;
		}
	  USB_USBTask();
	}
	
	start = 0;
    7394:	10 92 4a 01 	sts	0x014A, r1
	/* Disconnect from the host - USB interface will be reset later along with the AVR */
//	USB_Detach();
	//USB_Controller_Reset();
	//USB_ResetInterface();
	//_delay_ms(5000);
	USB_Disable();
    7398:	52 d0       	rcall	.+164    	; 0x743e <USB_Disable>
	Bootloader_StartUserApp();
    739a:	a4 de       	rcall	.-696    	; 0x70e4 <Bootloader_StartUserApp>
    739c:	ff cf       	rjmp	.-2      	; 0x739c <main+0x4c>

0000739e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    739e:	fa 01       	movw	r30, r20

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
	
	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
    73a0:	91 30       	cpi	r25, 0x01	; 1
    73a2:	29 f4       	brne	.+10     	; 0x73ae <CALLBACK_USB_GetDescriptor+0x10>
    73a4:	86 e1       	ldi	r24, 0x16	; 22
    73a6:	91 e0       	ldi	r25, 0x01	; 1
    73a8:	22 e1       	ldi	r18, 0x12	; 18
    73aa:	30 e0       	ldi	r19, 0x00	; 0
    73ac:	12 c0       	rjmp	.+36     	; 0x73d2 <CALLBACK_USB_GetDescriptor+0x34>
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);	
	}
	else if (DescriptorType == DTYPE_Configuration)
    73ae:	92 30       	cpi	r25, 0x02	; 2
    73b0:	29 f4       	brne	.+10     	; 0x73bc <CALLBACK_USB_GetDescriptor+0x1e>
    73b2:	88 e2       	ldi	r24, 0x28	; 40
    73b4:	91 e0       	ldi	r25, 0x01	; 1
    73b6:	22 e2       	ldi	r18, 0x22	; 34
    73b8:	30 e0       	ldi	r19, 0x00	; 0
    73ba:	0b c0       	rjmp	.+22     	; 0x73d2 <CALLBACK_USB_GetDescriptor+0x34>
	{
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);	
	}
	else if (DescriptorType == HID_DTYPE_HID)
    73bc:	91 32       	cpi	r25, 0x21	; 33
    73be:	29 f0       	breq	.+10     	; 0x73ca <CALLBACK_USB_GetDescriptor+0x2c>
    73c0:	81 e0       	ldi	r24, 0x01	; 1
    73c2:	91 e0       	ldi	r25, 0x01	; 1
    73c4:	25 e1       	ldi	r18, 0x15	; 21
    73c6:	30 e0       	ldi	r19, 0x00	; 0
    73c8:	04 c0       	rjmp	.+8      	; 0x73d2 <CALLBACK_USB_GetDescriptor+0x34>
    73ca:	8a e3       	ldi	r24, 0x3A	; 58
    73cc:	91 e0       	ldi	r25, 0x01	; 1
    73ce:	29 e0       	ldi	r18, 0x09	; 9
    73d0:	30 e0       	ldi	r19, 0x00	; 0
	{
		Address = &HIDReport;
		Size    = sizeof(HIDReport);
	}

	*DescriptorAddress = Address;
    73d2:	91 83       	std	Z+1, r25	; 0x01
    73d4:	80 83       	st	Z, r24
	return Size;
}
    73d6:	c9 01       	movw	r24, r18
    73d8:	08 95       	ret

000073da <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    73da:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    73de:	80 91 eb 00 	lds	r24, 0x00EB
    73e2:	81 60       	ori	r24, 0x01	; 1
    73e4:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    73e8:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
    73ec:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    73f0:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    73f4:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    73f8:	88 1f       	adc	r24, r24
    73fa:	88 27       	eor	r24, r24
    73fc:	88 1f       	adc	r24, r24
    73fe:	08 95       	ret

00007400 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    7400:	80 91 5c 01 	lds	r24, 0x015C
    7404:	88 23       	and	r24, r24
    7406:	8c f4       	brge	.+34     	; 0x742a <Endpoint_ClearStatusStage+0x2a>
    7408:	03 c0       	rjmp	.+6      	; 0x7410 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    740a:	8e b3       	in	r24, 0x1e	; 30
    740c:	88 23       	and	r24, r24
    740e:	b1 f0       	breq	.+44     	; 0x743c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7410:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    7414:	82 ff       	sbrs	r24, 2
    7416:	f9 cf       	rjmp	.-14     	; 0x740a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7418:	80 91 e8 00 	lds	r24, 0x00E8
    741c:	8b 77       	andi	r24, 0x7B	; 123
    741e:	80 93 e8 00 	sts	0x00E8, r24
    7422:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7424:	8e b3       	in	r24, 0x1e	; 30
    7426:	88 23       	and	r24, r24
    7428:	49 f0       	breq	.+18     	; 0x743c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    742a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    742e:	80 ff       	sbrs	r24, 0
    7430:	f9 cf       	rjmp	.-14     	; 0x7424 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7432:	80 91 e8 00 	lds	r24, 0x00E8
    7436:	8e 77       	andi	r24, 0x7E	; 126
    7438:	80 93 e8 00 	sts	0x00E8, r24
    743c:	08 95       	ret

0000743e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    743e:	61 d0       	rcall	.+194    	; 0x7502 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7440:	68 d0       	rcall	.+208    	; 0x7512 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    7442:	e0 ee       	ldi	r30, 0xE0	; 224
    7444:	f0 e0       	ldi	r31, 0x00	; 0
    7446:	80 81       	ld	r24, Z
    7448:	81 60       	ori	r24, 0x01	; 1
    744a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    744c:	a8 ed       	ldi	r26, 0xD8	; 216
    744e:	b0 e0       	ldi	r27, 0x00	; 0
    7450:	8c 91       	ld	r24, X
    7452:	8f 77       	andi	r24, 0x7F	; 127
    7454:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    7456:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    7458:	e7 ed       	ldi	r30, 0xD7	; 215
    745a:	f0 e0       	ldi	r31, 0x00	; 0
    745c:	80 81       	ld	r24, Z
    745e:	8e 7f       	andi	r24, 0xFE	; 254
    7460:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    7462:	8c 91       	ld	r24, X
    7464:	8f 7e       	andi	r24, 0xEF	; 239
    7466:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    7468:	10 92 5b 01 	sts	0x015B, r1
}
    746c:	08 95       	ret

0000746e <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    746e:	ef 92       	push	r14
    7470:	ff 92       	push	r15
    7472:	0f 93       	push	r16
    7474:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    7476:	45 d0       	rcall	.+138    	; 0x7502 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7478:	4c d0       	rcall	.+152    	; 0x7512 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    747a:	08 ed       	ldi	r16, 0xD8	; 216
    747c:	10 e0       	ldi	r17, 0x00	; 0
    747e:	f8 01       	movw	r30, r16
    7480:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
    7482:	98 2f       	mov	r25, r24
    7484:	9f 77       	andi	r25, 0x7F	; 127
    7486:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
    7488:	80 68       	ori	r24, 0x80	; 128
    748a:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    748c:	80 81       	ld	r24, Z
    748e:	8f 7d       	andi	r24, 0xDF	; 223
    7490:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    7492:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
    7494:	1e ba       	out	0x1e, r1	; 30
	USB_ConfigurationNumber  = 0;
    7496:	10 92 5a 01 	sts	0x015A, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    749a:	80 ee       	ldi	r24, 0xE0	; 224
    749c:	e8 2e       	mov	r14, r24
    749e:	f1 2c       	mov	r15, r1
    74a0:	f7 01       	movw	r30, r14
    74a2:	80 81       	ld	r24, Z
    74a4:	8b 7f       	andi	r24, 0xFB	; 251
    74a6:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    74a8:	f8 01       	movw	r30, r16
    74aa:	80 81       	ld	r24, Z
    74ac:	81 60       	ori	r24, 0x01	; 1
    74ae:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    74b0:	80 e0       	ldi	r24, 0x00	; 0
    74b2:	60 e0       	ldi	r22, 0x00	; 0
    74b4:	42 e0       	ldi	r20, 0x02	; 2
    74b6:	91 df       	rcall	.-222    	; 0x73da <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    74b8:	e1 ee       	ldi	r30, 0xE1	; 225
    74ba:	f0 e0       	ldi	r31, 0x00	; 0
    74bc:	80 81       	ld	r24, Z
    74be:	8e 7f       	andi	r24, 0xFE	; 254
    74c0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    74c2:	e2 ee       	ldi	r30, 0xE2	; 226
    74c4:	f0 e0       	ldi	r31, 0x00	; 0
    74c6:	80 81       	ld	r24, Z
    74c8:	81 60       	ori	r24, 0x01	; 1
    74ca:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    74cc:	80 81       	ld	r24, Z
    74ce:	88 60       	ori	r24, 0x08	; 8
    74d0:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    74d2:	f7 01       	movw	r30, r14
    74d4:	80 81       	ld	r24, Z
    74d6:	8e 7f       	andi	r24, 0xFE	; 254
    74d8:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    74da:	f8 01       	movw	r30, r16
    74dc:	80 81       	ld	r24, Z
    74de:	80 61       	ori	r24, 0x10	; 16
    74e0:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    74e2:	1f 91       	pop	r17
    74e4:	0f 91       	pop	r16
    74e6:	ff 90       	pop	r15
    74e8:	ef 90       	pop	r14
    74ea:	08 95       	ret

000074ec <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    74ec:	e7 ed       	ldi	r30, 0xD7	; 215
    74ee:	f0 e0       	ldi	r31, 0x00	; 0
    74f0:	80 81       	ld	r24, Z
    74f2:	81 60       	ori	r24, 0x01	; 1
    74f4:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    74f6:	8a e4       	ldi	r24, 0x4A	; 74
    74f8:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    74fa:	81 e0       	ldi	r24, 0x01	; 1
    74fc:	80 93 5b 01 	sts	0x015B, r24

	USB_ResetInterface();
}
    7500:	b6 cf       	rjmp	.-148    	; 0x746e <USB_ResetInterface>

00007502 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7502:	e8 ed       	ldi	r30, 0xD8	; 216
    7504:	f0 e0       	ldi	r31, 0x00	; 0
    7506:	80 81       	ld	r24, Z
    7508:	8e 7f       	andi	r24, 0xFE	; 254
    750a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    750c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    7510:	08 95       	ret

00007512 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7512:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7516:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    751a:	08 95       	ret

0000751c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    751c:	1f 92       	push	r1
    751e:	0f 92       	push	r0
    7520:	0f b6       	in	r0, 0x3f	; 63
    7522:	0f 92       	push	r0
    7524:	11 24       	eor	r1, r1
    7526:	2f 93       	push	r18
    7528:	3f 93       	push	r19
    752a:	4f 93       	push	r20
    752c:	5f 93       	push	r21
    752e:	6f 93       	push	r22
    7530:	7f 93       	push	r23
    7532:	8f 93       	push	r24
    7534:	9f 93       	push	r25
    7536:	af 93       	push	r26
    7538:	bf 93       	push	r27
    753a:	ef 93       	push	r30
    753c:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    753e:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    7542:	80 ff       	sbrs	r24, 0
    7544:	1c c0       	rjmp	.+56     	; 0x757e <__vector_10+0x62>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    7546:	80 91 d8 00 	lds	r24, 0x00D8
    754a:	80 ff       	sbrs	r24, 0
    754c:	18 c0       	rjmp	.+48     	; 0x757e <__vector_10+0x62>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    754e:	80 91 da 00 	lds	r24, 0x00DA
    7552:	8e 7f       	andi	r24, 0xFE	; 254
    7554:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7558:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    755c:	80 ff       	sbrs	r24, 0
    755e:	0c c0       	rjmp	.+24     	; 0x7578 <__vector_10+0x5c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    7560:	80 e1       	ldi	r24, 0x10	; 16
    7562:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    7564:	89 b5       	in	r24, 0x29	; 41
    7566:	82 60       	ori	r24, 0x02	; 2
    7568:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    756a:	09 b4       	in	r0, 0x29	; 41
    756c:	00 fe       	sbrs	r0, 0
    756e:	fd cf       	rjmp	.-6      	; 0x756a <__vector_10+0x4e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    7570:	81 e0       	ldi	r24, 0x01	; 1
    7572:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    7574:	ad d1       	rcall	.+858    	; 0x78d0 <USB_Event_Stub>
    7576:	03 c0       	rjmp	.+6      	; 0x757e <__vector_10+0x62>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    7578:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    757a:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    757c:	a9 d1       	rcall	.+850    	; 0x78d0 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    757e:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7582:	80 ff       	sbrs	r24, 0
    7584:	17 c0       	rjmp	.+46     	; 0x75b4 <__vector_10+0x98>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7586:	80 91 e2 00 	lds	r24, 0x00E2
    758a:	80 ff       	sbrs	r24, 0
    758c:	13 c0       	rjmp	.+38     	; 0x75b4 <__vector_10+0x98>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    758e:	80 91 e2 00 	lds	r24, 0x00E2
    7592:	8e 7f       	andi	r24, 0xFE	; 254
    7594:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7598:	80 91 e2 00 	lds	r24, 0x00E2
    759c:	80 61       	ori	r24, 0x10	; 16
    759e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    75a2:	80 91 d8 00 	lds	r24, 0x00D8
    75a6:	80 62       	ori	r24, 0x20	; 32
    75a8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    75ac:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    75ae:	85 e0       	ldi	r24, 0x05	; 5
    75b0:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    75b2:	8e d1       	rcall	.+796    	; 0x78d0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    75b4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    75b8:	84 ff       	sbrs	r24, 4
    75ba:	2d c0       	rjmp	.+90     	; 0x7616 <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    75bc:	80 91 e2 00 	lds	r24, 0x00E2
    75c0:	84 ff       	sbrs	r24, 4
    75c2:	29 c0       	rjmp	.+82     	; 0x7616 <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    75c4:	80 e1       	ldi	r24, 0x10	; 16
    75c6:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    75c8:	89 b5       	in	r24, 0x29	; 41
    75ca:	82 60       	ori	r24, 0x02	; 2
    75cc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    75ce:	09 b4       	in	r0, 0x29	; 41
    75d0:	00 fe       	sbrs	r0, 0
    75d2:	fd cf       	rjmp	.-6      	; 0x75ce <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    75d4:	80 91 d8 00 	lds	r24, 0x00D8
    75d8:	8f 7d       	andi	r24, 0xDF	; 223
    75da:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    75de:	80 91 e1 00 	lds	r24, 0x00E1
    75e2:	8f 7e       	andi	r24, 0xEF	; 239
    75e4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    75e8:	80 91 e2 00 	lds	r24, 0x00E2
    75ec:	8f 7e       	andi	r24, 0xEF	; 239
    75ee:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    75f2:	80 91 e2 00 	lds	r24, 0x00E2
    75f6:	81 60       	ori	r24, 0x01	; 1
    75f8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
    75fc:	80 91 5a 01 	lds	r24, 0x015A
    7600:	88 23       	and	r24, r24
    7602:	31 f4       	brne	.+12     	; 0x7610 <__vector_10+0xf4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7604:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7608:	87 fd       	sbrc	r24, 7
    760a:	02 c0       	rjmp	.+4      	; 0x7610 <__vector_10+0xf4>
    760c:	81 e0       	ldi	r24, 0x01	; 1
    760e:	01 c0       	rjmp	.+2      	; 0x7612 <__vector_10+0xf6>
    7610:	84 e0       	ldi	r24, 0x04	; 4
    7612:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7614:	5d d1       	rcall	.+698    	; 0x78d0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7616:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    761a:	83 ff       	sbrs	r24, 3
    761c:	21 c0       	rjmp	.+66     	; 0x7660 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    761e:	80 91 e2 00 	lds	r24, 0x00E2
    7622:	83 ff       	sbrs	r24, 3
    7624:	1d c0       	rjmp	.+58     	; 0x7660 <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7626:	80 91 e1 00 	lds	r24, 0x00E1
    762a:	87 7f       	andi	r24, 0xF7	; 247
    762c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
    7630:	82 e0       	ldi	r24, 0x02	; 2
    7632:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
    7634:	10 92 5a 01 	sts	0x015A, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7638:	80 91 e1 00 	lds	r24, 0x00E1
    763c:	8e 7f       	andi	r24, 0xFE	; 254
    763e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7642:	80 91 e2 00 	lds	r24, 0x00E2
    7646:	8e 7f       	andi	r24, 0xFE	; 254
    7648:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    764c:	80 91 e2 00 	lds	r24, 0x00E2
    7650:	80 61       	ori	r24, 0x10	; 16
    7652:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    7656:	80 e0       	ldi	r24, 0x00	; 0
    7658:	60 e0       	ldi	r22, 0x00	; 0
    765a:	42 e0       	ldi	r20, 0x02	; 2
    765c:	be de       	rcall	.-644    	; 0x73da <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    765e:	38 d1       	rcall	.+624    	; 0x78d0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7660:	ff 91       	pop	r31
    7662:	ef 91       	pop	r30
    7664:	bf 91       	pop	r27
    7666:	af 91       	pop	r26
    7668:	9f 91       	pop	r25
    766a:	8f 91       	pop	r24
    766c:	7f 91       	pop	r23
    766e:	6f 91       	pop	r22
    7670:	5f 91       	pop	r21
    7672:	4f 91       	pop	r20
    7674:	3f 91       	pop	r19
    7676:	2f 91       	pop	r18
    7678:	0f 90       	pop	r0
    767a:	0f be       	out	0x3f, r0	; 63
    767c:	0f 90       	pop	r0
    767e:	1f 90       	pop	r1
    7680:	18 95       	reti

00007682 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7682:	0f 93       	push	r16
    7684:	1f 93       	push	r17
    7686:	df 93       	push	r29
    7688:	cf 93       	push	r28
    768a:	00 d0       	rcall	.+0      	; 0x768c <USB_Device_ProcessControlRequest+0xa>
    768c:	cd b7       	in	r28, 0x3d	; 61
    768e:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7690:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    7694:	80 93 5c 01 	sts	0x015C, r24
    7698:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    769c:	80 93 5d 01 	sts	0x015D, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    76a0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    76a4:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    76a8:	ee e5       	ldi	r30, 0x5E	; 94
    76aa:	f1 e0       	ldi	r31, 0x01	; 1
    76ac:	80 93 5e 01 	sts	0x015E, r24
    76b0:	90 93 5f 01 	sts	0x015F, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    76b4:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    76b8:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    76bc:	80 93 60 01 	sts	0x0160, r24
    76c0:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    76c2:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    76c6:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    76ca:	80 93 62 01 	sts	0x0162, r24
    76ce:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
    76d0:	b6 dd       	rcall	.-1172   	; 0x723e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    76d2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    76d6:	83 ff       	sbrs	r24, 3
    76d8:	e6 c0       	rjmp	.+460    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    76da:	80 91 5c 01 	lds	r24, 0x015C

		switch (USB_ControlRequest.bRequest)
    76de:	90 91 5d 01 	lds	r25, 0x015D
    76e2:	95 30       	cpi	r25, 0x05	; 5
    76e4:	09 f4       	brne	.+2      	; 0x76e8 <USB_Device_ProcessControlRequest+0x66>
    76e6:	6d c0       	rjmp	.+218    	; 0x77c2 <USB_Device_ProcessControlRequest+0x140>
    76e8:	96 30       	cpi	r25, 0x06	; 6
    76ea:	40 f4       	brcc	.+16     	; 0x76fc <USB_Device_ProcessControlRequest+0x7a>
    76ec:	91 30       	cpi	r25, 0x01	; 1
    76ee:	81 f1       	breq	.+96     	; 0x7750 <USB_Device_ProcessControlRequest+0xce>
    76f0:	91 30       	cpi	r25, 0x01	; 1
    76f2:	70 f0       	brcs	.+28     	; 0x7710 <USB_Device_ProcessControlRequest+0x8e>
    76f4:	93 30       	cpi	r25, 0x03	; 3
    76f6:	09 f0       	breq	.+2      	; 0x76fa <USB_Device_ProcessControlRequest+0x78>
    76f8:	d6 c0       	rjmp	.+428    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
    76fa:	2a c0       	rjmp	.+84     	; 0x7750 <USB_Device_ProcessControlRequest+0xce>
    76fc:	98 30       	cpi	r25, 0x08	; 8
    76fe:	09 f4       	brne	.+2      	; 0x7702 <USB_Device_ProcessControlRequest+0x80>
    7700:	a5 c0       	rjmp	.+330    	; 0x784c <USB_Device_ProcessControlRequest+0x1ca>
    7702:	99 30       	cpi	r25, 0x09	; 9
    7704:	09 f4       	brne	.+2      	; 0x7708 <USB_Device_ProcessControlRequest+0x86>
    7706:	b4 c0       	rjmp	.+360    	; 0x7870 <USB_Device_ProcessControlRequest+0x1ee>
    7708:	96 30       	cpi	r25, 0x06	; 6
    770a:	09 f0       	breq	.+2      	; 0x770e <USB_Device_ProcessControlRequest+0x8c>
    770c:	cc c0       	rjmp	.+408    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
    770e:	7e c0       	rjmp	.+252    	; 0x780c <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7710:	80 38       	cpi	r24, 0x80	; 128
    7712:	09 f4       	brne	.+2      	; 0x7716 <USB_Device_ProcessControlRequest+0x94>
    7714:	c8 c0       	rjmp	.+400    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
    7716:	82 38       	cpi	r24, 0x82	; 130
    7718:	09 f0       	breq	.+2      	; 0x771c <USB_Device_ProcessControlRequest+0x9a>
    771a:	c5 c0       	rjmp	.+394    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    771c:	80 91 60 01 	lds	r24, 0x0160
    7720:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7722:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7726:	80 91 eb 00 	lds	r24, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    772a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    772e:	20 91 e8 00 	lds	r18, 0x00E8
    7732:	27 7f       	andi	r18, 0xF7	; 247
    7734:	20 93 e8 00 	sts	0x00E8, r18
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7738:	90 e0       	ldi	r25, 0x00	; 0
    773a:	25 e0       	ldi	r18, 0x05	; 5
    773c:	96 95       	lsr	r25
    773e:	87 95       	ror	r24
    7740:	2a 95       	dec	r18
    7742:	e1 f7       	brne	.-8      	; 0x773c <USB_Device_ProcessControlRequest+0xba>
    7744:	81 70       	andi	r24, 0x01	; 1
    7746:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    774a:	10 92 f1 00 	sts	0x00F1, r1
    774e:	89 c0       	rjmp	.+274    	; 0x7862 <USB_Device_ProcessControlRequest+0x1e0>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7750:	88 23       	and	r24, r24
    7752:	19 f0       	breq	.+6      	; 0x775a <USB_Device_ProcessControlRequest+0xd8>
    7754:	82 30       	cpi	r24, 0x02	; 2
    7756:	09 f0       	breq	.+2      	; 0x775a <USB_Device_ProcessControlRequest+0xd8>
    7758:	a6 c0       	rjmp	.+332    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    775a:	8f 71       	andi	r24, 0x1F	; 31
    775c:	82 30       	cpi	r24, 0x02	; 2
    775e:	09 f0       	breq	.+2      	; 0x7762 <USB_Device_ProcessControlRequest+0xe0>
    7760:	a2 c0       	rjmp	.+324    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7762:	80 91 5e 01 	lds	r24, 0x015E
    7766:	88 23       	and	r24, r24
    7768:	31 f5       	brne	.+76     	; 0x77b6 <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    776a:	20 91 60 01 	lds	r18, 0x0160
    776e:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7770:	09 f4       	brne	.+2      	; 0x7774 <USB_Device_ProcessControlRequest+0xf2>
    7772:	99 c0       	rjmp	.+306    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7774:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7778:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    777c:	80 ff       	sbrs	r24, 0
    777e:	1b c0       	rjmp	.+54     	; 0x77b6 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7780:	93 30       	cpi	r25, 0x03	; 3
    7782:	21 f4       	brne	.+8      	; 0x778c <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7784:	80 91 eb 00 	lds	r24, 0x00EB
    7788:	80 62       	ori	r24, 0x20	; 32
    778a:	13 c0       	rjmp	.+38     	; 0x77b2 <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    778c:	80 91 eb 00 	lds	r24, 0x00EB
    7790:	80 61       	ori	r24, 0x10	; 16
    7792:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7796:	81 e0       	ldi	r24, 0x01	; 1
    7798:	90 e0       	ldi	r25, 0x00	; 0
    779a:	02 c0       	rjmp	.+4      	; 0x77a0 <USB_Device_ProcessControlRequest+0x11e>
    779c:	88 0f       	add	r24, r24
    779e:	99 1f       	adc	r25, r25
    77a0:	2a 95       	dec	r18
    77a2:	e2 f7       	brpl	.-8      	; 0x779c <USB_Device_ProcessControlRequest+0x11a>
    77a4:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    77a8:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    77ac:	80 91 eb 00 	lds	r24, 0x00EB
    77b0:	88 60       	ori	r24, 0x08	; 8
    77b2:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    77b6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    77ba:	80 91 e8 00 	lds	r24, 0x00E8
    77be:	87 7f       	andi	r24, 0xF7	; 247
    77c0:	53 c0       	rjmp	.+166    	; 0x7868 <USB_Device_ProcessControlRequest+0x1e6>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    77c2:	88 23       	and	r24, r24
    77c4:	09 f0       	breq	.+2      	; 0x77c8 <USB_Device_ProcessControlRequest+0x146>
    77c6:	6f c0       	rjmp	.+222    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    77c8:	10 91 5e 01 	lds	r17, 0x015E
    77cc:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    77ce:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    77d0:	f8 94       	cli
    77d2:	80 91 e8 00 	lds	r24, 0x00E8
    77d6:	87 7f       	andi	r24, 0xF7	; 247
    77d8:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    77dc:	11 de       	rcall	.-990    	; 0x7400 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    77de:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    77e2:	80 ff       	sbrs	r24, 0
    77e4:	fc cf       	rjmp	.-8      	; 0x77de <USB_Device_ProcessControlRequest+0x15c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    77e6:	80 91 e3 00 	lds	r24, 0x00E3
    77ea:	80 78       	andi	r24, 0x80	; 128
    77ec:	81 2b       	or	r24, r17
    77ee:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
    77f2:	80 91 e3 00 	lds	r24, 0x00E3
    77f6:	80 68       	ori	r24, 0x80	; 128
    77f8:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    77fc:	11 23       	and	r17, r17
    77fe:	11 f4       	brne	.+4      	; 0x7804 <USB_Device_ProcessControlRequest+0x182>
    7800:	82 e0       	ldi	r24, 0x02	; 2
    7802:	01 c0       	rjmp	.+2      	; 0x7806 <USB_Device_ProcessControlRequest+0x184>
    7804:	83 e0       	ldi	r24, 0x03	; 3
    7806:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7808:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
    780a:	4d c0       	rjmp	.+154    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    780c:	80 58       	subi	r24, 0x80	; 128
    780e:	82 30       	cpi	r24, 0x02	; 2
    7810:	08 f0       	brcs	.+2      	; 0x7814 <USB_Device_ProcessControlRequest+0x192>
    7812:	49 c0       	rjmp	.+146    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7814:	80 91 5e 01 	lds	r24, 0x015E
    7818:	90 91 5f 01 	lds	r25, 0x015F
    781c:	60 91 60 01 	lds	r22, 0x0160
    7820:	ae 01       	movw	r20, r28
    7822:	4f 5f       	subi	r20, 0xFF	; 255
    7824:	5f 4f       	sbci	r21, 0xFF	; 255
    7826:	bb dd       	rcall	.-1162   	; 0x739e <CALLBACK_USB_GetDescriptor>
    7828:	bc 01       	movw	r22, r24
    782a:	00 97       	sbiw	r24, 0x00	; 0
    782c:	09 f4       	brne	.+2      	; 0x7830 <USB_Device_ProcessControlRequest+0x1ae>
    782e:	3b c0       	rjmp	.+118    	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7830:	80 91 e8 00 	lds	r24, 0x00E8
    7834:	87 7f       	andi	r24, 0xF7	; 247
    7836:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    783a:	89 81       	ldd	r24, Y+1	; 0x01
    783c:	9a 81       	ldd	r25, Y+2	; 0x02
    783e:	49 d0       	rcall	.+146    	; 0x78d2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7840:	80 91 e8 00 	lds	r24, 0x00E8
    7844:	8b 77       	andi	r24, 0x7B	; 123
    7846:	80 93 e8 00 	sts	0x00E8, r24
    784a:	2d c0       	rjmp	.+90     	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    784c:	80 38       	cpi	r24, 0x80	; 128
    784e:	59 f5       	brne	.+86     	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7850:	80 91 e8 00 	lds	r24, 0x00E8
    7854:	87 7f       	andi	r24, 0xF7	; 247
    7856:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
    785a:	80 91 5a 01 	lds	r24, 0x015A
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    785e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7862:	80 91 e8 00 	lds	r24, 0x00E8
    7866:	8e 77       	andi	r24, 0x7E	; 126
    7868:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    786c:	c9 dd       	rcall	.-1134   	; 0x7400 <Endpoint_ClearStatusStage>
    786e:	1b c0       	rjmp	.+54     	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7870:	88 23       	and	r24, r24
    7872:	c9 f4       	brne	.+50     	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7874:	90 91 5e 01 	lds	r25, 0x015E
    7878:	92 30       	cpi	r25, 0x02	; 2
    787a:	a8 f4       	brcc	.+42     	; 0x78a6 <USB_Device_ProcessControlRequest+0x224>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    787c:	80 91 e8 00 	lds	r24, 0x00E8
    7880:	87 7f       	andi	r24, 0xF7	; 247
    7882:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7886:	90 93 5a 01 	sts	0x015A, r25

	Endpoint_ClearStatusStage();
    788a:	ba dd       	rcall	.-1164   	; 0x7400 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    788c:	80 91 5a 01 	lds	r24, 0x015A
    7890:	88 23       	and	r24, r24
    7892:	31 f4       	brne	.+12     	; 0x78a0 <USB_Device_ProcessControlRequest+0x21e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7894:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7898:	87 fd       	sbrc	r24, 7
    789a:	02 c0       	rjmp	.+4      	; 0x78a0 <USB_Device_ProcessControlRequest+0x21e>
    789c:	81 e0       	ldi	r24, 0x01	; 1
    789e:	01 c0       	rjmp	.+2      	; 0x78a2 <USB_Device_ProcessControlRequest+0x220>
    78a0:	84 e0       	ldi	r24, 0x04	; 4
    78a2:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    78a4:	37 dd       	rcall	.-1426   	; 0x7314 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    78a6:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    78aa:	83 ff       	sbrs	r24, 3
    78ac:	0a c0       	rjmp	.+20     	; 0x78c2 <USB_Device_ProcessControlRequest+0x240>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    78ae:	80 91 eb 00 	lds	r24, 0x00EB
    78b2:	80 62       	ori	r24, 0x20	; 32
    78b4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    78b8:	80 91 e8 00 	lds	r24, 0x00E8
    78bc:	87 7f       	andi	r24, 0xF7	; 247
    78be:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    78c2:	0f 90       	pop	r0
    78c4:	0f 90       	pop	r0
    78c6:	cf 91       	pop	r28
    78c8:	df 91       	pop	r29
    78ca:	1f 91       	pop	r17
    78cc:	0f 91       	pop	r16
    78ce:	08 95       	ret

000078d0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    78d0:	08 95       	ret

000078d2 <Endpoint_Write_Control_Stream_LE>:
    78d2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    78d4:	40 91 62 01 	lds	r20, 0x0162
    78d8:	50 91 63 01 	lds	r21, 0x0163
    78dc:	46 17       	cp	r20, r22
    78de:	57 07       	cpc	r21, r23
    78e0:	18 f4       	brcc	.+6      	; 0x78e8 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    78e2:	f9 01       	movw	r30, r18
    78e4:	90 e0       	ldi	r25, 0x00	; 0
    78e6:	44 c0       	rjmp	.+136    	; 0x7970 <Endpoint_Write_Control_Stream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    78e8:	61 15       	cp	r22, r1
    78ea:	71 05       	cpc	r23, r1
    78ec:	11 f0       	breq	.+4      	; 0x78f2 <Endpoint_Write_Control_Stream_LE+0x20>
    78ee:	ab 01       	movw	r20, r22
    78f0:	f8 cf       	rjmp	.-16     	; 0x78e2 <Endpoint_Write_Control_Stream_LE+0x10>
    78f2:	80 91 e8 00 	lds	r24, 0x00E8
    78f6:	8e 77       	andi	r24, 0x7E	; 126
    78f8:	80 93 e8 00 	sts	0x00E8, r24
    78fc:	40 e0       	ldi	r20, 0x00	; 0
    78fe:	50 e0       	ldi	r21, 0x00	; 0
    7900:	f0 cf       	rjmp	.-32     	; 0x78e2 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7902:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7904:	88 23       	and	r24, r24
    7906:	09 f4       	brne	.+2      	; 0x790a <Endpoint_Write_Control_Stream_LE+0x38>
    7908:	44 c0       	rjmp	.+136    	; 0x7992 <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    790a:	85 30       	cpi	r24, 0x05	; 5
    790c:	09 f4       	brne	.+2      	; 0x7910 <Endpoint_Write_Control_Stream_LE+0x3e>
    790e:	43 c0       	rjmp	.+134    	; 0x7996 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7910:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7914:	83 ff       	sbrs	r24, 3
    7916:	02 c0       	rjmp	.+4      	; 0x791c <Endpoint_Write_Control_Stream_LE+0x4a>
    7918:	81 e0       	ldi	r24, 0x01	; 1
    791a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    791c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7920:	82 fd       	sbrc	r24, 2
    7922:	31 c0       	rjmp	.+98     	; 0x7986 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7924:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7928:	80 ff       	sbrs	r24, 0
    792a:	22 c0       	rjmp	.+68     	; 0x7970 <Endpoint_Write_Control_Stream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    792c:	80 91 f3 00 	lds	r24, 0x00F3
    7930:	90 91 f2 00 	lds	r25, 0x00F2
    7934:	78 2f       	mov	r23, r24
    7936:	60 e0       	ldi	r22, 0x00	; 0
    7938:	29 2f       	mov	r18, r25
    793a:	30 e0       	ldi	r19, 0x00	; 0
    793c:	26 2b       	or	r18, r22
    793e:	37 2b       	or	r19, r23
    7940:	07 c0       	rjmp	.+14     	; 0x7950 <Endpoint_Write_Control_Stream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7942:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7944:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7948:	41 50       	subi	r20, 0x01	; 1
    794a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    794c:	2f 5f       	subi	r18, 0xFF	; 255
    794e:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    7950:	41 15       	cp	r20, r1
    7952:	51 05       	cpc	r21, r1
    7954:	19 f0       	breq	.+6      	; 0x795c <Endpoint_Write_Control_Stream_LE+0x8a>
    7956:	28 30       	cpi	r18, 0x08	; 8
    7958:	31 05       	cpc	r19, r1
    795a:	98 f3       	brcs	.-26     	; 0x7942 <Endpoint_Write_Control_Stream_LE+0x70>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    795c:	90 e0       	ldi	r25, 0x00	; 0
    795e:	28 30       	cpi	r18, 0x08	; 8
    7960:	31 05       	cpc	r19, r1
    7962:	09 f4       	brne	.+2      	; 0x7966 <Endpoint_Write_Control_Stream_LE+0x94>
    7964:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7966:	80 91 e8 00 	lds	r24, 0x00E8
    796a:	8e 77       	andi	r24, 0x7E	; 126
    796c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7970:	41 15       	cp	r20, r1
    7972:	51 05       	cpc	r21, r1
    7974:	31 f6       	brne	.-116    	; 0x7902 <Endpoint_Write_Control_Stream_LE+0x30>
    7976:	99 23       	and	r25, r25
    7978:	21 f6       	brne	.-120    	; 0x7902 <Endpoint_Write_Control_Stream_LE+0x30>
    797a:	05 c0       	rjmp	.+10     	; 0x7986 <Endpoint_Write_Control_Stream_LE+0xb4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    797c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    797e:	88 23       	and	r24, r24
    7980:	41 f0       	breq	.+16     	; 0x7992 <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7982:	85 30       	cpi	r24, 0x05	; 5
    7984:	41 f0       	breq	.+16     	; 0x7996 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7986:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    798a:	82 ff       	sbrs	r24, 2
    798c:	f7 cf       	rjmp	.-18     	; 0x797c <Endpoint_Write_Control_Stream_LE+0xaa>
    798e:	80 e0       	ldi	r24, 0x00	; 0
    7990:	08 95       	ret
    7992:	82 e0       	ldi	r24, 0x02	; 2
    7994:	08 95       	ret
    7996:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7998:	08 95       	ret

0000799a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    799a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    799c:	8e b3       	in	r24, 0x1e	; 30
    799e:	88 23       	and	r24, r24
    79a0:	61 f0       	breq	.+24     	; 0x79ba <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    79a2:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    79a6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    79aa:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    79ae:	83 ff       	sbrs	r24, 3
    79b0:	01 c0       	rjmp	.+2      	; 0x79b4 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
    79b2:	67 de       	rcall	.-818    	; 0x7682 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    79b4:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    79b6:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    79ba:	1f 91       	pop	r17
    79bc:	08 95       	ret

000079be <_exit>:
    79be:	f8 94       	cli

000079c0 <__stop_program>:
    79c0:	ff cf       	rjmp	.-2      	; 0x79c0 <__stop_program>
